stages:
  - build
  - deploy

variables:
  GIT_STRATEGY: "fetch"
  DJANGO_SETTINGS_MODULE: config.settings
  MYSQL_HOST: db
  MYSQL_DATABASE: updaterninja
  MYSQL_ROOT_PASSWORD: ninjapassword
  PMA_HOST: db
  PMA_USER: root
  PMA_PASSWORD: ninjapassword
  UPLOAD_LIMIT: 300M
  ESEP_DB_HOST: 192.168.1.17
  ESEP_DB_USER: sultan_a
  ESEP_DB_PASSWORD: 'L$xUQyBQ'
  ESEP_DB_NAME: esep
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED: "1"

build-job:
  stage: build
  tags: [esep-ninja]
  before_script:
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
    - find "$CI_PROJECT_DIR" -type d -name "__pycache__" -prune -exec rm -rf {} + || true
    - git rev-parse HEAD
  script:
    - echo "Generating .env.dev..."
    - |
      cat > .env.dev <<'EOF'
      DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      MYSQL_HOST=${MYSQL_HOST}
      MYSQL_DATABASE=${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      PMA_HOST=${PMA_HOST}
      PMA_USER=${PMA_USER}
      PMA_PASSWORD=${PMA_PASSWORD}
      UPLOAD_LIMIT=${UPLOAD_LIMIT}
      ESEP_DB_HOST=${ESEP_DB_HOST}
      ESEP_DB_USER=${ESEP_DB_USER}
      ESEP_DB_PASSWORD=${ESEP_DB_PASSWORD}
      ESEP_DB_NAME=${ESEP_DB_NAME}
      EOF
    - echo "Building Docker images..."
    - docker-compose -f docker-compose.yml build
  artifacts:
    paths:
      - .env.dev
    expire_in: 1 hour

deploy-job:
  stage: deploy
  tags: [esep-ninja]
  needs: ["build-job"]
  dependencies: ["build-job"]
  before_script:
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
    - find "$CI_PROJECT_DIR" -type d -name "__pycache__" -prune -exec rm -rf {} + || true
    - git rev-parse HEAD
    - ls -la
  script:
    # Дадим docker-compose корректный env: либо переименуем,
    # либо используем --env-file (раскомментируй один из вариантов).
    - mv -f .env.dev .env
    # - export COMPOSE_DOCKER_CLI_BUILD=1   # (опционально) ускорение сборки
    - echo "Stopping existing containers..."
    - docker-compose -f docker-compose.yml down --remove-orphans || true
    - echo "Building & starting updated containers..."
    - docker-compose -f docker-compose.yml up -d --build --force-recreate
    - echo "Checking container status..."
    - docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
  only:
    - main
    - develop
